starts with:

use
	decl_use > use <alpha>*
<alpha>*
	decl_name > <alpha>*
	assignment > * = expression
	function_call (expression) > * (...
(
	expression > // as rvalue only
<digit>
	number (constant_value) (expression)
-<digit>
	number (constant_value) (expression)
"
	string (constant_value) (expression) > "...
true
	bool_value (constant_value) (expression)
false
	bool_value (constant_value) (expression)
enum
	decl_enum (decl_complex) (declaration) > enum *
class
	decl_class (decl_complex) (declaration) > class *
from
	decl_base_class (modifies previous class) > from *
func
	decl_function (decl_complex) (declaration) > func *
var
	decl_member
//
	comment_single_line (comment) > //...
/*
	comment_multi_line (comment) > /*...
+ - * / .
	previous expression is now part of an operation
! < <= == >= && || ^
	previous expression is now part of a comparison
if
	if (control) (statement) > if expression then statement
else
	else_case > else statement|end
elsif
	else_case > elsif expression statement|end
while
	while (control) (statement) > while expression
do
	do (control) (statement) > do statement|end ...
while
	while (control) (statement) > while expression ...
switch
	switch (control) (statement) > switch expression ...
case
	case (must be in switch) > case ...
break
	simple (statement)
continue
	simple (statement)
return (statement)
	return


TODO: 
+= *=