<alphanumeric> ::= <alpha> | <digit>
	<alpha> ::= a..z
	<digit> ::= 0..9

<name> ::= <alpha> { <alphanumeric> }
<var_name> ::= <name>
<function_name> ::= <name>
<class_name> ::= name
<enum_name> ::= name
<file_name> ::= name
<call_name> ::= <function_name> | <class_name> "." <function_name>

<document> ::= { <statement> }

	<statement> ::= decl_use | <assignment> | <declaration> | <expression> | <control> | <comment>

		<decl_use> ::= use <file_name>
		
		<assignment> ::= <var_name> '=' <expression> // Can be function call to class name

		<declaration> ::= <decl_complex>
			<decl_complex> ::= <decl_enum> | <decl_class> | <decl_function>
				<decl_enum> ::= enum <enum_name> <enum_value> { ',' <enum_value> } end
					<enum_value> ::= <var_name>
				<decl_class> ::= class <class_name> <decl_base_class> { <decl_function> | <decl_member> } end
					<decl_base_class> ::= from <class_name>
					<decl_member> ::= var <var_name> // assignment?
				<decl_function> ::= function <function_name> ( <decl_params> ) <block> end
					<decl_params> ::= <var_name> { , <var_name> }
					<block> ::= { <statement> }

		// rvalue
		<expression> ::= '(' <expression> ')' | <constant_value> | <var_name> | <operation> | <function_call>
		
			<constant_value> ::= <number_value> | <string_value> | <bool_value>
				<number_value> ::= <number>
				<string_value> ::= '"'...'"'
				<bool_value> ::= true | false
				
			<operation> ::= <expression> <operator> <expression>
				<operator> ::= <arithmetic_operator> | <logical_operator>
					<arithmetic_operator> ::= "!" | "<" | "<=" | "==" | ">" | ">=" | "&&" | "||" | "^"
					<logical_operator> ::= "+" | "-" | "*" | "/" | "."

			<function_call> ::= <function_message_name> ( <params> )
				<function_message_name> ::= <call_name> | <built_in_function>
				<built_in_function> ::= <return> | break | continue
					<return> ::= return <expression>
				<params> ::= <expression> { , <expression> }
			
		<control>             ::= <if> | <for> | <while> | <do> | <switch>
			<if>              ::= if ( <condition_if> ) { <condition_else> ) end
				<condition_if>    ::= if <condition>
				<condition_else>  ::= ( elsif | else if ) <condition>
				<condition>       ::= '(' <expression> ')' <block>
			<for>             ::= <for_in> | <for_from>
			<for_in>          ::= for <for_variant> in <var_name> do <block> end
			<for_from>        ::= for <for_variant> from <expression> to <expression> do <block> end
				<for_variant> :== <var_name>
			<while>           ::= while '(' <expression> ')' do <block> end
			<do>              ::= do <block> while '(' <expression> ')'
			<switch>          ::= switch '(' <expression> ')' { <case> } end
				<case>            ::= case '(' <expression> | default ')' <block> end
				
		<comment> ::= <comment_single_line> | <comment_multi_line>"
			<comment_single_line> ::= //..."\n"
			<comment_multi_line> ::= "/*"..."*/"
