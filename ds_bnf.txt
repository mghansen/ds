<alphanumeric> ::= <alpha> | <digit>
	<alpha> ::= a..z | A..Z | '_'
	<digit> ::= 0..9
<name> ::= <alpha> { <alphanumeric> }

<number> ::= <sign> <digits> <fractional_part>
	<sign> ::= '-' | ''
	<digits> ::= <digit> { <digit> }
	<fractional_part> ::= '' | '.' <digits>

<document> ::= { <statement> }

	<statement> ::= <decl_use> | <assignment> | <declaration> | <expression> | <control> | <comment>

		<decl_use> ::= use <file_name>
			<file_name> ::= <name>
		
		<assignment> ::= <var_name> <assignment_operator> <assignment_rvalue> // Can be function call to class name
			<var_name> ::= <name> | <name> "[" <expression> "]"
			<assignment_operator> ::= "=" | "+=" | "-=" | "*=" | "/="
			<assignment_rvalue> ::= <expression> | new <class_name> | array of <expression>

		<declaration> ::=  <decl_enum> | <decl_class> | <decl_function>
			<decl_enum> ::= enum <enum_name> <enum_value> { ',' <enum_value> } end
				<enum_name> ::= <name>
				<enum_value> ::= <var_name>
			<decl_class> ::= class <class_name> <decl_base_class> { <decl_function> | <decl_member> } end
				<class_name> ::= <name>
				<decl_base_class> ::= from <class_name>
				<decl_member> ::= var <var_name> // assignment?
			<decl_function> ::= function <function_name> ( <decl_params> ) <block> end
				<function_name> ::= <name>
				<decl_params> ::= <var_name> { , <var_name> }
				<block> ::= { <statement> }

		// rvalue
		<expression> ::= <nested_expression> | <constant_value> | <var_name> | <operation> | <function_call> | nil
		
			<nested_expression> :: = '(' <expression> ')'
		
			<constant_value> ::= <number_value> | <string_value> | <bool_value>
				<number_value> ::= <number>
				<string_value> ::= '"'...'"'
				<bool_value> ::= true | false
				
			<operation> ::= <expression> <operator> <expression>
				<operator> ::= <arithmetic_operator> | <logical_operator>
					<arithmetic_operator> ::= "!" | "<" | "<=" | "==" | ">=" | ">" | "&&" | "||" | "^"
					<logical_operator> ::= "+" | "-" | "*" | "/" | "."

			<function_call> ::= <function_message_name> ( <params> )
				<function_message_name> ::= <call_name> | <built_in_function>
					<call_name> ::= <function_name> | <class_name> "." <function_name>
				<built_in_function> ::= <return> | break | continue
					<return> ::= return <expression>
				<params> ::= <expression> { , <expression> }
			
		<control> ::= <if> | <for_in> | <for_from> | <while> | <do> | <switch>
		
			<if> ::= if ( <condition_if> ) { <condition_else> ) end
				<condition_if> ::= if <condition>
				<condition_else> ::= elsif <condition>
				<condition> ::= <nested_expression> <block>
				
			<for_in> ::= for <for_variant> in <set> do <block> end
				<set> ::= <var_name>
			<for_from> | ::= for <for_variant> from <expression> to <expression> <block> end
				<for_variant> :== <var_name>
				
			<while> ::= while <nested_expression> do <block> end
			<do> ::= do <block> while <nested_expression>
			
			<switch> ::= switch <nested_expression> { <case> } end
				<case> ::= case <case_expression> <block> end
					<case_expression> ::= default | <nested_expression>
				
		<comment> ::= <comment_single_line> | <comment_multi_line>"
			<comment_single_line> ::= "//" ... "\n"
			<comment_multi_line> ::= "/*" ... "*/"
